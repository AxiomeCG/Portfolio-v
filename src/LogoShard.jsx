/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useEffect, useRef} from 'react';
import {Float, MeshTransmissionMaterial, useGLTF, useTexture} from '@react-three/drei';
import {useSnapshot} from 'valtio';
import {landingPageConfig, showcaseConfig, state} from './state.js';
import {Spherical} from 'three';
import {useFrame} from '@react-three/fiber';

export function LogoShard(props) {
    const {nodes, materials} = useGLTF('/logo.glb');

    const texture = useTexture('/project1.png')
    const meshRef = useRef();

    const snapshot = useSnapshot(state)
    const config = snapshot.mode === 'landing' ? landingPageConfig : showcaseConfig

    const floatConfig = {
        rotationIntensity: 0
    }
    const fontProps = {
        font: '/ClashDisplay-Regular.woff',
        fontSize: 2.5,
        letterSpacing: -0.05,
        lineHeight: 1,
        'material-toneMapped': false
    }
    const groupRef = useRef();

    useEffect(() => {
        if (groupRef.current) {
            groupRef.current.children.forEach((child, index) => {

                if (index === 0) {
                    child.position.set(1,0,0);

                }
                const spherical = new Spherical(5,  Math.PI/4,  ( 2 * Math.PI / (groupRef.current.children.length-1)) * index);

                child.position.setFromSpherical(spherical);
                child.position.x += Math.random() * 3.0;
                child.position.y += Math.random()* 3.0;
                child.position.z += Math.random()* 3.0;
            })
        }
    }, []);

    useFrame((state, delta) => {
        if (groupRef.current) {
            groupRef.current.children.forEach((child, index) => {
                if (index === 0) {
                    child.position.set(1,0,0);

                }
               child.rotation.x += delta;
               child.rotation.y += delta
            })
        }
    })
    return (

        <group ref={groupRef} {...props} dispose={null}>
            <Float>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard001.geometry}
                >
                    <MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard002.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard003.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>

                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard004.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard005.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard006.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard007.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard008.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard009.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard010.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard011.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
            <Float {...floatConfig}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Shard012.geometry}
                ><MeshTransmissionMaterial envMapIntensity={3} {...config} />
                </mesh>
            </Float>
        </group>
    );
}

useGLTF.preload('/logo.glb');
